<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.image.*?>
<?import javafx.geometry.*?>
<?import javafx.scene.text.*?>
<?import javafx.scene.control.*?>
<?import java.lang.*?>
<?import javafx.scene.layout.*?>

<BorderPane maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="552.0" prefWidth="600.0" xmlns="http://javafx.com/javafx/8.0.40" xmlns:fx="http://javafx.com/fxml/1" fx:controller="gol.ControllerInfo">
   <top>
      <HBox alignment="CENTER_LEFT" prefHeight="68.0" prefWidth="600.0" BorderPane.alignment="CENTER">
         <children>
            <Label text="Mode d'emploi">
               <font>
                  <Font size="25.0" />
               </font>
               <padding>
                  <Insets left="20.0" />
               </padding>
            </Label>
            <Region HBox.hgrow="ALWAYS" />
            <ImageView fitHeight="81.0" fitWidth="197.0" pickOnBounds="true" preserveRatio="true">
               <image>
                  <Image url="@logo2.png" />
               </image>
               <HBox.margin>
                  <Insets right="10.0" />
               </HBox.margin>
            </ImageView>
         </children>
      </HBox>
   </top>
   <center>
      <TextArea editable="false" prefHeight="293.0" prefWidth="600.0" text="LE PROJET&#10;----------------------------------------------------------------------------------------------------------------&#10;Ce Game of Life à été réalisé dans le cadre d'un projet Universitaire de Licence 3 Informatique &#10;à Paris Diderot. Il a été encadré par Aldric DEGORRE (Maître de conférences au Laboratoire &#10;d'Informatique Algorithmique (LIAFA)) et  Victor MARSAULT de la même équipe de recherche (Automates et Applications).&#10;Le but du projet était de programmer un Game of Life en rendant facile l'ajout de nouveaux atomates &#10;et de nouvelles grilles. &#10;Nous avons décidé de faire une interface graphique (Optionnelle) pour rendre plus facile les interactions avec l'utilisateur.&#10;&#10;1 / INITIALISER LA GRILLE&#10;----------------------------------------------------------------------------------------------------------------&#10;Il est possible d'initialiser une grille de plusieurs façons :&#10;&#9;1) Vous pouvez choisir le type de grille en cliquant sur les butons adéquats (Square ou Hexagon).&#10;&#9;2) Vous pouvez cliquer sur une case morte pour la rendre en vie et inversement &#10;            (Dépend du mode de jeu).&#10;&#9;3) Vous pouvez choisir un poucentage de remplissage aléatoire et remplir la grille.&#10;            en cliquant sur random.&#10;&#9;4) Vous pouvez charger une grille à partir d'un fichier existant (Nous avons mis à disposition &#10;            le dossier Patterns qui contient plusieurs motifs intéressants dans plusieurs modes de jeu).&#10;&#10;&#10;2/ MODES DE SIMULATION&#10;----------------------------------------------------------------------------------------------------------------&#10;Le mode TORIQUE permet à la grille de reboucler sur elle même, lorsque l'option est désactivée la grille n'admet pas de voisins quand est sur les bords.&#10;A noter qu'on peut à tout moment changer cette option, même au milieu d'une simulation.&#10;&#10;&#9;1) Mode Classique : &#10;&#9;&#9;Game of Life de Conway, si une cellule est vivante, elle reste en vie si elle a 2 ou 3 &#10;&#9;&#9;voisins vivants, si elle en a plus elle meurt et si elle en a moins, elle meurt.&#10;&#9;&#9;Une cellule naît quand elle a 3 voisins exactement.&#10;&#10;&#9;2) Mode Isotrope : &#10;                Si une cellule est vivante, elle reste en vie si elle a 2, 4 ou 5 voisins vivants, &#10;                si ce n'est pas le cas elle meurt. &#10;                Si une cellule est morte elle naît quand elle a 3, 6 ou 8 voisins en vie.&#10;&#10;&#9;3) Mode Immigration :&#10;                Les règles sont les mêmes que dans le mode classique à la différence &#10;                qu'il existe 2 états vivants. Si une cellule est vivante, elle reste en vie &#10;                si elle a 2 ou 3 voisins vivants, si elle en a plus elle meurt et si elle &#10;                en a moins, elle meurt.&#9;Une cellule naît quand elle a 3 voisins exactement, &#10;                la cellule naissante prends l'état vivant majoritaire parmi ses voisins.&#10;&#10;&#9;4) Mode DayAndNight :&#10;                Si une cellule est vivante, elle reste en vie si elle a 3, 6, 7 ou 8 voisins vivants, &#10;                si ce n'est pas le cas elle meurt. &#10;                Si une cellule est morte elle naît quand elle a 3, 4, 6, 7 ou 8 voisins en vie.&#10;&#10;&#9;5) Mode HighLife :&#10;                Si une cellule est vivante, elle reste en vie si elle a 2 ou 3 voisins vivants, &#10;                si ce n'est pas le cas elle meurt. &#10;                Si une cellule est morte elle naît quand elle a 3 ou 6 voisins en vie.&#10;&#10;&#9;6) Mode Fredkin :&#10;                Une cellulle reste en vie ou naît uniquement si elle a un nombre de voisins &#10;                vivants impair.&#10;&#10;&#9;7) Mode Griffeath :&#10;            On considère le nombre d'état infini. On dispose de 4 états et une cellule à l'état i&#10;            passe à l'état (i+1) si elle a au moins 3 voisins dans ce même état (i+1). Lorsque&#10;            la cellule est à l'état 4 elle évolue à l'état 1 lorsque les conditions sont rénunies.&#10;&#10;        8) Mode Griffeath(n) :&#10;            On considère le nombre d'état infini. On dispose de n états et une cellule à l'état i&#10;            passe à l'état (i+1) si elle a au moins 3 voisins dans ce même état (i+1). Lorsque&#10;            la cellule est à l'état n elle évolue à l'état 1 lorsque les conditions sont rénunies.&#10;&#10;        9) Mode Moyenne :&#10;            L'état de la cellule est maintenant un nombre réel compris entre 0 et 1 &#10;            (affiché sous forme de nuances de bleu). A la génération suivante la cellule &#10;            devient la moyenne de ses voisins.&#10;&#10;        10) Mode Maths :&#10;            L'état de la cellule est un nombre réel compris entre 0 et 1 (affiché sous forme&#10;            de nuances de bleu). A la génération suivante la cellule devient (x*y+c) &#10;            où x est la moyenne, y son ancien état et :&#10;            -c vaut 0.5 si (x*y)&lt;0.25; -c vaut -0.5 si (x*y)&gt;0.75; - c vaut 0 sinon&#10;&#10;3/ COMMENCER LA SIMULATION&#10;----------------------------------------------------------------------------------------------------------------&#10;Une fois votre grille initialisée, vous pouvez commencer la partie en cliquant sur Start (Cela lance une boucle infinie qui à chaque tour augmente de génération) ou en cliquant sur Step(Qui n'incrémente que d'une génération).&#10;Vous pouvez choisir la vitesse d'itération via le Slider prévu à cet effet et enfin à tout moment vous pouvez interrompre la simulation en cliquant sur stop. &#10;&#10;4/ POUR LES DEVELOPPEURS&#10;----------------------------------------------------------------------------------------------------------------&#10;&#10;&#10;5/ AUTEURS&#10;----------------------------------------------------------------------------------------------------------------&#10;    Jessica FAVIN&#10;    Anthony CHAFFOT" wrapText="true" BorderPane.alignment="CENTER">
         <BorderPane.margin>
            <Insets bottom="10.0" left="10.0" right="10.0" />
         </BorderPane.margin>
      </TextArea>
   </center>
   <bottom>
      <HBox alignment="CENTER_RIGHT" BorderPane.alignment="CENTER">
         <children>
            <Button fx:id="b_closeOk" mnemonicParsing="false" onAction="#handleClose" prefHeight="25.0" prefWidth="83.0" text="Ok">
               <HBox.margin>
                  <Insets bottom="10.0" right="10.0" />
               </HBox.margin>
            </Button>
         </children>
      </HBox>
   </bottom>
</BorderPane>
